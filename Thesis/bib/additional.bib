@techreport{first_riscv,
  author      = {Waterman, Andrew and Lee, Yunsup and Patterson, David A. and Asanović, Krste},
  title       = {The RISC-V Instruction Set Manual, Volume I: Base User-Level ISA},
  year        = {2011},
  month       = {May},
  url         = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2011/EECS-2011-62.html},
  institution = {UC Berkeley},
  number      = {UCB/EECS-2011-62}
}

@misc{riscvorg,
  howpublished = {\url{https://riscv.org/about/}},
  title        = {{History of RISC-V}},
  note         = {Accessed: 15.08.2025}
}

@misc{repoRV2BTOR,
  howpublished = {\url{https://github.com/Kr1mo/RISC-V_to_BTOR2}},
  title        = {{RISC-V\_to\_BTOR2}},
  version      = {}
}

@misc{repoSim,
  howpublished = {\url{https://github.com/Kr1mo/Risc-V-Simulator}},
  title        = {{RISC-V-Simulator}},
  version      = {}
}

@inproceedings{ponoPaper,
  author    = {Mann, Makai and Irfan, Ahmed and Lonsing, Florian and Yang, Yahan and Zhang, Hongce and Brown, Kristopher and Gupta, Aarti and Barrett, Clark},
  title     = {Pono: A Flexible and Extensible SMT-Based Model Checker},
  year      = {2021},
  isbn      = {978-3-030-81687-2},
  publisher = {Springer-Verlag},
  address   = {Berlin, Heidelberg},
  url       = {https://doi.org/10.1007/978-3-030-81688-9_22},
  doi       = {10.1007/978-3-030-81688-9_22},
  abstract  = {Symbolic model checking is an important tool for finding bugs (or proving the absence of bugs) in modern system designs. Because of this, improving the ease of use, scalability, and performance of model checking tools and algorithms continues to be an important research direction. In service of this goal, we present Pono, an open-source SMT-based model checker. Pono is designed to be both a research platform for developing and improving model checking algorithms, as well as a performance-competitive tool that can be used for academic and industry verification applications. In addition to performance, Pono prioritizes transparency (developed as an open-source project on GitHub), flexibility (Pono can be adapted to a variety of tasks by exploiting its general SMT-based interface), and extensibility (it is easy to add new algorithms and new back-end solvers). In this paper, we describe the design of the tool with a focus on the flexible and extensible architecture, cover its current capabilities, and demonstrate that Pono is competitive with state-of-the-art tools.},
  booktitle = {Computer Aided Verification: 33rd International Conference, CAV 2021, Virtual Event, July 20–23, 2021, Proceedings, Part II},
  pages     = {461–474},
  numpages  = {14}
}

@inproceedings{avrPaper,
  author    = {Goel, Aman
               and Sakallah, Karem},
  editor    = {Biere, Armin
               and Parker, David},
  title     = {AVR: Abstractly Verifying Reachability},
  booktitle = {Tools and Algorithms for the Construction and Analysis of Systems},
  year      = {2020},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {413--422},
  abstract  = {We present AVR, a push-button model checker for verifying state transition systems directly at the source-code level. AVR uses information embedded in the word-level syntax of the design representation to automatically perform scalable model checking by combining a novel syntax-guided abstraction-refinement technique with a word-level implementation of the IC3 algorithm. AVR provides independently-verifiable certificates that offer provable assurance and are easy to relate to the word-level system. Moreover, proof certificates can be further used in innovative ways to extract key design information and are useful in a growing number of applications.},
  isbn      = {978-3-030-45190-5}
}

@incollection{BiereBMC,
  author    = {Armin Biere},
  editor    = {Armin Biere and
               Marijn Heule and
               Hans van Maaren and
               Toby Walsh},
  title     = {Bounded Model Checking},
  booktitle = {Handbook of Satisfiability},
  edition   = {Second},
  series    = {Frontiers in Artificial Intelligence and Applications},
  volume    = {336},
  pages     = {739--764},
  publisher = {{IOS} Press},
  year      = {2021},
  url       = {https://doi.org/10.3233/FAIA201002},
  doi       = {10.3233/FAIA201002}
}

@misc{HWMCC,
  howpublished = {\url{https://hwmcc.github.io/2024/}},
  title        = {{HWMCC 2024}},
  version      = {}
}

@techreport{AIGER,
  author      = {Armin Biere},
  title       = {The {AIGER And-Inverter Graph (AIG)} Format Version 20071012},
  number      = {07/1},
  date        = {October 2007},
  institution = {Institute for Formal Models and Verification,
                 Johannes Kepler University},
  address     = {Altenbergerstr. 69, 4040 Linz, Austria},
  year        = {2007}
}

 
@inproceedings{DBLP:conf/cav/CavadaCDGMMMRT14,
  author    = {Roberto Cavada and
               Alessandro Cimatti and
               Michele Dorigatti and
               Alberto Griggio and
               Alessandro Mariotti and
               Andrea Micheli and
               Sergio Mover and
               Marco Roveri and
               Stefano Tonetta},
  title     = {The nuXmv Symbolic Model Checker},
  booktitle = {CAV},
  year      = {2014},
  pages     = {334-342},
  ee        = {http://dx.doi.org/10.1007/978-3-319-08867-9_22},
  crossref  = {DBLP:conf/cav/2014},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}
@proceedings{DBLP:conf/cav/2014,
  editor    = {Armin Biere and
               Roderick Bloem},
  title     = {Computer Aided Verification - 26th International Conference,
               CAV 2014, Held as Part of the Vienna Summer of Logic, VSL
               2014, Vienna, Austria, July 18-22, 2014. Proceedings},
  booktitle = {CAV},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {8559},
  year      = {2014},
  isbn      = {978-3-319-08866-2},
  ee        = {http://dx.doi.org/10.1007/978-3-319-08867-9},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


        @inproceedings{SVCOMP25,
  author    = {D.~Beyer and J.~Strejček},
  title     = {Improvements in Software Verification and Witness Validation: {SV-COMP 2025}},
  booktitle = {Proc.\ TACAS~(3)},
  pages     = {151-186},
  year      = {2025},
  series    = {LNCS~15698},
  publisher = {Springer},
  doi       = {10.1007/978-3-031-90660-2_9}
}

@inproceedings{btor2c,
  author    = {Beyer, Dirk
               and Chien, Po-Chun
               and Lee, Nian-Ze},
  editor    = {Sankaranarayanan, Sriram
               and Sharygina, Natasha},
  title     = {Bridging Hardware and Software Analysis with Btor2C: A Word-Level-Circuit-to-C Translator},
  booktitle = {Tools and Algorithms for the Construction and Analysis of Systems},
  year      = {2023},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {152--172},
  abstract  = {Across the broad research field concerned with the analysis of computational systems, research endeavors are often categorized by the respective models under investigation. Algorithms and tools are usually developed for a specific model, hindering their applications to similar problems originating from other computational systems. A prominent example of such a situation is the area of formal verification and testing for hardware and software systems. The two research communities share common theoretical foundations and solving methods, including satisfiability, interpolation, and abstraction refinement. Nevertheless, it is often demanding for one community to benefit from the advancements of the other, as analyzers typically assume a particular input format. To bridge the gap between the hardware and software analysis, we propose Btor2C, a translator from word-level sequential circuits to C programs. We choose the Btor2 language as the input format for its simplicity and bit-precise semantics. It can be deemed as an intermediate representation tailored for analysis. Given a Btor2 circuit, Btor2C generates a behaviorally equivalent program in the language C, supported by many static program analyzers. We demonstrate the use cases of Btor2C by translating the benchmark set from the Hardware Model Checking Competitions into C programs and analyze them by tools from the Intl. Competitions on Software Verification and Testing. Our results show that software analyzers can complement hardware verifiers for enhanced quality assurance: For example, the software verifier VeriAbs with Btor2C as preprocessor found more bugs than the best hardware verifiers ABC and AVR in our experiment.},
  isbn      = {978-3-031-30820-8}
}
